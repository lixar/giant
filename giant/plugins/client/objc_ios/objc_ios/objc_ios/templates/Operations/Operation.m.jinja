{% import 'variables-ios.jinja' as ios with context %}
{% import 'variables.jinja' as vars with context %}
{{ (ios.project_name + '/Operations/' + class_prefix + 'Operation')|start_of_file -}}
{{- ios.file_header(class_prefix + 'OperationBuilder.h') }}

#import "{{ class_prefix }}Operation.h"
#import <AFNetworking/AFNetworking.h>
#import "{{ class_prefix }}JSONable.h"

#ifndef {{ class_prefix }}LogDebug
#define {{ class_prefix }}LogDebug(fmt, ...) NSLog(fmt, ##__VA_ARGS__)
#endif

#ifndef {{ class_prefix }}LogInfo
#define {{ class_prefix }}LogInfo(fmt, ...) NSLog(fmt, ##__VA_ARGS__)
#endif

#ifndef {{ class_prefix }}LogWarn
#define {{ class_prefix }}LogWarn(fmt, ...) NSLog(fmt, ##__VA_ARGS__)
#endif

#ifndef {{ class_prefix }}LogError
#define {{ class_prefix }}LogError(fmt, ...) NSLog(fmt, ##__VA_ARGS__)
#endif

typedef void (^AFURLSessionTaskDidFinishCollectingMetricsBlock)(NSURLSession *session, NSURLSessionTask *task, NSURLSessionTaskMetrics* metrics);

@interface AECPHTTPSessionManager : AFHTTPSessionManager

@property (readwrite, nonatomic, copy) AFURLSessionTaskDidFinishCollectingMetricsBlock taskDidFinishCollectingMetricsBlock;

@end

@implementation AECPHTTPSessionManager

- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didFinishCollectingMetrics:(NSURLSessionTaskMetrics *)metrics
{
    if (self.taskDidFinishCollectingMetricsBlock) {
        self.taskDidFinishCollectingMetricsBlock(session, task, metrics);
    }
}

@end

@interface {{ class_prefix }}Operation ()

@property (atomic, strong) NSURLSessionTask *task;
@property (nonatomic, getter = isFinished, readwrite)  BOOL finished;
@property (nonatomic, getter = isExecuting, readwrite) BOOL executing;
@property (nonatomic, copy) id<AECPOperationBuilder> builder;

@end

@implementation {{ class_prefix }}Operation

@dynamic builder;
@synthesize finished  = _finished;
@synthesize executing = _executing;

- (instancetype)init
{
    if((self = [super init]) == nil) return nil;
    
    _finished  = NO;
    _executing = NO;
    
    return self;
}

+ (NSUInteger)responseHeaderSize:(NSHTTPURLResponse*)response
{
    unsigned long long size = @"HTTP/1.1 200     ".length;
    for(NSString* key in response.allHeaderFields) {
        NSString* value = response.allHeaderFields[key];
        size = size + key.length + value.length + @": ".length + 2;
    }
    return size;
}

+ (NSUInteger)requestHeaderSize:(NSURLRequest*)request
{
    unsigned long long size = @"HTTP/1.1 200     ".length;
    for(NSString* key in request.allHTTPHeaderFields) {
        NSString* value = request.allHTTPHeaderFields[key];
        size = size + key.length + value.length + @": ".length + 2;
    }
    size = size + @"Host: ".length + request.URL.host.length + 2;
    size = size + @"Connection: keep-alive  ".length;
    size = size + @"Accept: */*  ".length;
    size = size + @"Content-Length: XXX  ".length;
    return size;
}

- (void)setupDataTask
{
    AFHTTPRequestSerializer *serializer;
    id parameters;
    if(self.consumesJSON) {
        serializer = self.class.jsonSerializer;
        id<{{ class_prefix }}JSONable> jsonable = self.parameters;
        parameters = [jsonable toJSON];
    }
    else {
        serializer = self.class.httpSerializer;
        parameters = self.parameters;
    }
    
    {{ class_prefix }}HTTPSessionManager* sessionManager;
    if(self.isFileDownload) {
        sessionManager = [*self.class.jsonSessionManager copy];
    }
    else if(self.produces.count == 0 || [self.produces[0] isEqualToString:@"application/json"]) {
        sessionManager = [*self.class.jsonSessionManager copy];
    }
    else {
        sessionManager = [*self.class.httpSessionManager copy];
        sessionManager.responseSerializer.acceptableContentTypes = [NSSet setWithArray:self.produces];
    }

    NSString* URLString = [NSURL URLWithString:self.URLString relativeToURL:sessionManager.baseURL].absoluteString;
    
    NSError *error;
    
    NSMutableURLRequest *request;
    if(self.isMultipart) {
        request = [serializer
         multipartFormRequestWithMethod:self.method
         URLString:URLString
         parameters:parameters
         constructingBodyWithBlock:^(id<AFMultipartFormData>  _Nonnull formData) {
             //! \todo:: Implement this
         }
         error:&error];
    }
    else {
        request = [serializer
         requestWithMethod:self.method
         URLString:URLString
         parameters:parameters
         error:&error];
    }
    
    if(self.consumesJSON) {
        [request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
    }
    
    for(NSString* key in *self.class.defaultHeaders) {
        [request setValue:(*self.class.defaultHeaders)[key] forHTTPHeaderField:key];
    }
    
    if(self.headers != nil) {
        for(NSString* key in self.headers) {
            [request setValue:self.headers[key] forHTTPHeaderField:key];
        }
    }
    
    __weak {{ class_prefix }}Operation* weakSelf = self;
    
    if(self.securityDefinition != nil) {
        [request setValue:self.class.apiKeys[self.securityDefinition] forHTTPHeaderField:@"Authorization"];
    }
    
    for(NSString* key in self.builder.customHeaders) {
        [request setValue:self.builder.customHeaders[key] forHTTPHeaderField:key];
    }
    
    @weakify(self);
    sessionManager.taskDidFinishCollectingMetricsBlock = ^(NSURLSession *session, NSURLSessionTask *task, NSURLSessionTaskMetrics* taskMetrics) {
        STRENGTHEN_SELF_OR_RETURN_VOID
        for(NSURLSessionTaskTransactionMetrics* metrics in taskMetrics.transactionMetrics) {
            if(metrics.resourceFetchType == NSURLSessionTaskMetricsResourceFetchTypeLocalCache) {
                if(self.class.cacheHitBlock != nil) {
                    unsigned long long requestSize = self.task.countOfBytesSent + [self.class requestHeaderSize:task.currentRequest];
                    unsigned long long responseSize = [self.class responseHeaderSize:(NSHTTPURLResponse*)task.response];
                    if(*self.class.cacheHitBlock != nil) {
                        (*self.class.cacheHitBlock)(task.response.URL, requestSize, responseSize, self.task.countOfBytesReceived);
                    }
                }
                AECPLogDebug(@"%@ Cache Hit", task.response.URL);
                return;
            }
        }
        unsigned long long requestSize = self.task.countOfBytesSent + [self.class requestHeaderSize:task.currentRequest];
        unsigned long long responseSize = self.task.countOfBytesReceived + [self.class responseHeaderSize:(NSHTTPURLResponse*)task.response];
        if(*self.class.cacheMissBlock != nil) {
            (*self.class.cacheMissBlock)(task.response.URL, requestSize, responseSize, 0);
        }
        AECPLogDebug(@"%@ Cache Miss", task.response.URL);
    };
    
    __weak AECPHTTPSessionManager* weakSessionManager = sessionManager;
    [sessionManager setSessionDidReceiveAuthenticationChallengeBlock:^NSURLSessionAuthChallengeDisposition(NSURLSession * _Nonnull session, NSURLAuthenticationChallenge * _Nonnull challenge, NSURLCredential *__autoreleasing  _Nullable * _Nullable credential) {
        
        __strong AFURLSessionManager* strongSessionManager = weakSessionManager;
        if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) {
            if ([strongSessionManager.securityPolicy evaluateServerTrust:challenge.protectionSpace.serverTrust forDomain:challenge.protectionSpace.host]) {
                *credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];
                if (credential) {
                    return NSURLSessionAuthChallengeUseCredential;
                }
                else {
                    return NSURLSessionAuthChallengePerformDefaultHandling;
                }
            }
            else {
                return NSURLSessionAuthChallengeCancelAuthenticationChallenge;
            }
        }
        else if (challenge.protectionSpace.authenticationMethod == NSURLAuthenticationMethodClientCertificate) {
            if({{ class_prefix }}Operation.clientCertificateData == nil) {
                return NSURLSessionAuthChallengePerformDefaultHandling;
            }
            NSData *p12Data = *{{ class_prefix }}Operation.clientCertificateData;
            NSString* passwordString = (*{{ class_prefix }}Operation.clientCertificatePasswordBlock)();
            CFStringRef password = (__bridge CFStringRef)passwordString;
            const void *keys[] = { kSecImportExportPassphrase };
            const void *values[] = { password };
            CFDictionaryRef optionsDictionary = CFDictionaryCreate(NULL, keys, values, 1, NULL, NULL);
            CFArrayRef p12Items;
            
            OSStatus result = SecPKCS12Import((__bridge CFDataRef)p12Data, optionsDictionary, &p12Items);
            if(result != noErr) {
                return NSURLSessionAuthChallengeCancelAuthenticationChallenge;
            }
            
            CFDictionaryRef identityDict = CFArrayGetValueAtIndex(p12Items, 0);
            SecIdentityRef identityApp =(SecIdentityRef)CFDictionaryGetValue(identityDict,kSecImportItemIdentity);
            
            SecCertificateRef certRef;
            SecIdentityCopyCertificate(identityApp, &certRef);
            
            SecCertificateRef certArray[1] = { certRef };
            CFArrayRef myCerts = CFArrayCreate(NULL, (void *)certArray, 1, NULL);
            CFRelease(certRef);
            
            *credential = [NSURLCredential credentialWithIdentity:identityApp certificates:(__bridge NSArray *)myCerts persistence:NSURLCredentialPersistencePermanent];
            CFRelease(myCerts);
            return NSURLSessionAuthChallengeUseCredential;
        }
        else {
            return NSURLSessionAuthChallengePerformDefaultHandling;
        }
    }];
    
    self.isCachedResponse = NO;
    [sessionManager setDataTaskWillCacheResponseBlock:^NSCachedURLResponse * _Nonnull(NSURLSession * _Nonnull session, NSURLSessionDataTask * _Nonnull dataTask, NSCachedURLResponse * _Nonnull proposedResponse) {
        NSCachedURLResponse* cachedResponse = [session.configuration.URLCache cachedResponseForRequest:dataTask.currentRequest];
        if(cachedResponse != nil) {
            NSString* cachedEtag = ((NSHTTPURLResponse*)cachedResponse.response).allHeaderFields[@"Etag"];
            NSString* newEtag = ((NSHTTPURLResponse*)proposedResponse.response).allHeaderFields[@"Etag"];
            self.isCachedResponse = cachedEtag != nil && newEtag != nil && [cachedEtag isEqualToString:newEtag];
        }
        return proposedResponse;
    }];
    
    void(^completion)(NSURLResponse * _Nonnull, id  _Nullable, NSError * _Nullable) = ^(NSURLResponse * _Nonnull response, id  _Nullable responseObject, NSError * _Nullable error) {
        {{ class_prefix }}LogDebug(@"Response: %@", response);
        weakSelf.error = error;
        weakSelf.response = response;
        if(error != nil) {
            {{ class_prefix }}LogError(@"Request failed. %@", error);
            if([responseObject isKindOfClass:NSData.class]) {
                NSDictionary* dictionary = [NSJSONSerialization JSONObjectWithData:responseObject options:0 error:nil];
                {{ class_prefix }}LogError(@"Response Error: %@", dictionary);
                weakSelf.errorResponseObject = dictionary;
            }
            else {
                {{ class_prefix }}LogError(@"Error Response: %@", responseObject);
                weakSelf.errorResponseObject = responseObject; // This will parse if needed.
            }
            [NSNotificationCenter.defaultCenter postNotificationName:@"NetworkRequestFailed" object:weakSelf];
        }
        else {
            {{ class_prefix }}LogInfo(@"Request succeeded.");
            if([responseObject isKindOfClass:NSData.class]) {
                NSString* contentType = ((NSHTTPURLResponse*)response).allHeaderFields[@"Content-Type"];
                if(contentType != nil && [weakSelf.class isTextContentType:contentType]) {
                    NSString* responseString = [NSString stringWithCString:((NSData*)responseObject).bytes encoding:weakSessionManager.responseSerializer.stringEncoding];
                    if(responseString == nil) {
                        responseString = [NSString stringWithCString:[((NSData*)responseObject) bytes] encoding:NSISOLatin1StringEncoding];
                    }
                    {{ class_prefix }}LogDebug(@"Response: %@", responseString);
                    weakSelf.responseObject = responseString;
                }
                else {
                    {{ class_prefix }}LogDebug(@"Response: %@", responseObject);
                    weakSelf.responseObject = responseObject;
                }
            }
            else {
                {{ class_prefix }}LogDebug(@"Response: %@", responseObject);
                weakSelf.responseObject = responseObject; // This will parse if needed.
            }
        }
        [weakSelf completeOperation];
        [weakSessionManager invalidateSessionCancelingTasks:NO];
    };
    
    if(self.isFileDownload) {
        [sessionManager setDataTaskDidReceiveResponseBlock:^NSURLSessionResponseDisposition(NSURLSession * _Nonnull session, NSURLSessionDataTask * _Nonnull dataTask, NSURLResponse * _Nonnull response) {
            NSUInteger statusCode = ((NSHTTPURLResponse*)response).statusCode;
            if(statusCode >= 200 && statusCode < 300) {
                {{ class_prefix }}LogDebug(@"Converting data operation to download operation.");
                return NSURLSessionResponseBecomeDownload;
            }
            else {
                return NSURLSessionResponseAllow;
            }
        }];
        __weak typeof(self) weakSelf = self;
        __weak typeof(sessionManager) weakSessionManager = sessionManager;
        [sessionManager setDataTaskDidBecomeDownloadTaskBlock:^(NSURLSession * _Nonnull session, NSURLSessionDataTask * _Nonnull dataTask, NSURLSessionDownloadTask * _Nonnull downloadTask) {
            weakSelf.task = downloadTask;
            [weakSessionManager setDownloadTaskDidFinishDownloadingBlock:^NSURL * _Nullable(NSURLSession * _Nonnull session, NSURLSessionDownloadTask * _Nonnull downloadTask, NSURL * _Nonnull location) {
                {{ class_prefix }}LogDebug(@"File finished downloading.");
                NSURL* filePath = [weakSelf filepath];
                return filePath;
            }];
        }];
    }
    
    self.task =
    [sessionManager
     dataTaskWithRequest:request
     completionHandler:completion];
}

+ (BOOL)isTextContentType:(NSString*)contentType
{
    for(NSString* testContentType in @[@"text/html", @"text/plain", @"text/css", @"text/javascript", @"application/javascript"]) {
        if([contentType containsString:testContentType]) {
            return YES;
        }
    }
    return NO;
}

+ (NSString* __strong *)_urlRoot
{
    static NSString* urlRoot = HOSTNAME;
    return &urlRoot;
}

+ (void)setURLRoot:(NSString*)host
{
    (*self._urlRoot) = [host copy];
    if(*self.httpSessionManager != nil) {
        [*self.httpSessionManager invalidateSessionCancelingTasks:NO];
    }
    if(*self.jsonSessionManager != nil) {
        [*self.jsonSessionManager invalidateSessionCancelingTasks:NO];
    }
    *self.httpSessionManager = [[{{ class_prefix }}HTTPSessionManager alloc] initWithBaseURL:[NSURL URLWithString:host]];
    (*self.httpSessionManager).responseSerializer = [AFHTTPResponseSerializer serializer];
    *self.jsonSessionManager = [[{{ class_prefix }}HTTPSessionManager alloc] initWithBaseURL:[NSURL URLWithString:host]];
}

+ (NSString*)urlRoot
{
    return *self._urlRoot;
}

+ (NSString* __strong *)_urlBasePath
{
    static NSString* basePath = @"{{ swagger.basePath|remove_trailing_slash }}";
    return &basePath;
}

+ (void)setURLBasePath:(NSString*)basePath
{
    *self._urlBasePath = basePath;
}

+ (NSString*)urlBasePath
{
    return *self._urlBasePath;
}

+ (AFHTTPSessionManager * __strong *)jsonSessionManager
{
    static AFHTTPSessionManager* client = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        client = [[{{ class_prefix }}HTTPSessionManager alloc] initWithBaseURL:[NSURL URLWithString:@"https://localhost:10010"]];
    });
    return &client;
}

+ (AFHTTPSessionManager * __strong *)httpSessionManager
{
    static AFHTTPSessionManager* client = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        client = [[{{ class_prefix }}HTTPSessionManager alloc] initWithBaseURL:[NSURL URLWithString:@"https://localhost:10010"]];
        client.responseSerializer = [AFHTTPResponseSerializer serializer];
    });
    return &client;
}

+ (__strong AECPCacheTrackingBlock*)cacheHitBlock
{
    static AECPCacheTrackingBlock block = nil;
    return &block;
}

+ (__strong AECPCacheTrackingBlock*)cacheMissBlock
{
    static AECPCacheTrackingBlock block = nil;
    return &block;
}

+ (void)setCacheTrackingBlocksOnHit:(AECPCacheTrackingBlock)onHit onMiss:(AECPCacheTrackingBlock)onMiss
{
    *self.cacheHitBlock = onHit;
    *self.cacheMissBlock = onMiss;
}

+ (NSData * __strong *)clientCertificateData
{
    static NSData* data = nil;
    return &data;
}

typedef NSString*(^CertificatePasswordBlock)();

+ (__strong CertificatePasswordBlock*)clientCertificatePasswordBlock
{
    static CertificatePasswordBlock block = nil;
    return &block;
}

+ (void)setClientCertificateNamed:(NSString*)name withPasswordBlock:(NSString*(^)())passwordBlock
{
    NSString* certPath = [NSBundle.mainBundle pathForResource:name ofType:@"p12"];
    if(certPath == nil) {
        {{ class_prefix }}LogError(@"Error setting client cert. File not found.");
        return;
    }
    NSData *p12Data = [NSData dataWithContentsOfFile:certPath];
    if(p12Data == nil) {
        {{ class_prefix }}LogError(@"Error setting client cert. File could not be read.");
        return;
    }
    *self.clientCertificateData = p12Data;
    *self.clientCertificatePasswordBlock = passwordBlock;
}

+ (void)pinPublicKeysForCertificatesNamed:(NSArray<NSString*>*)names
{
    NSBundle *bundle = [NSBundle bundleForClass:[self class]];
    NSMutableSet* certificates = [NSMutableSet set];
    for(NSString* name in names) {
        NSString* path = [bundle pathForResource:name ofType:@"cer"];
        [certificates addObject:[NSData dataWithContentsOfFile:path]];
    }
    (*self.httpSessionManager).securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModePublicKey withPinnedCertificates:[certificates copy]];
    (*self.jsonSessionManager).securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModePublicKey withPinnedCertificates:[certificates copy]];
}

+ (void)pinCertificatesNamed:(NSArray<NSString*>*)names
{
    NSBundle *bundle = [NSBundle bundleForClass:[self class]];
    NSMutableSet* certificates = [NSMutableSet set];
    for(NSString* name in names) {
        NSString* path = [bundle pathForResource:name ofType:@"cer"];
        [certificates addObject:[NSData dataWithContentsOfFile:path]];
    }
    (*self.httpSessionManager).securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate withPinnedCertificates:[certificates copy]];
    (*self.jsonSessionManager).securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate withPinnedCertificates:[certificates copy]];
}

+ (void)pinPublicKeyForCertificateNamed:(NSString*)name
{
    NSBundle *bundle = [NSBundle bundleForClass:[self class]];
    NSString* path = [bundle pathForResource:name ofType:@"cer"];
    NSSet *certificate = [NSSet setWithObject:[NSData dataWithContentsOfFile:path]];
    (*self.httpSessionManager).securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModePublicKey withPinnedCertificates:certificate];
    (*self.jsonSessionManager).securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModePublicKey withPinnedCertificates:certificate];
}

+ (void)pinCertificateNamed:(NSString*)name
{
    NSBundle *bundle = [NSBundle bundleForClass:[self class]];
    NSString* path = [bundle pathForResource:name ofType:@"cer"];
    NSSet *certificate = [NSSet setWithObject:[NSData dataWithContentsOfFile:path]];
    (*self.httpSessionManager).securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate withPinnedCertificates:certificate];
    (*self.jsonSessionManager).securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate withPinnedCertificates:certificate];
}

+ (void)allowInvalidCertificates
{
    (*self.httpSessionManager).securityPolicy.allowInvalidCertificates = YES;
    (*self.jsonSessionManager).securityPolicy.allowInvalidCertificates = YES;
}

+ (AFHTTPRequestSerializer*)jsonSerializer
{    
    static AFJSONRequestSerializer* serializer = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        serializer = [AFJSONRequestSerializer serializer];
    });
    //! \todo Set defaults for this serializer.
    return serializer;
}

+ (AFHTTPRequestSerializer*)httpSerializer
{
    static AFHTTPRequestSerializer* serializer = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        serializer = [AFHTTPRequestSerializer serializer];
    });
    //! \todo Set defaults for this serializer.
    return serializer;
}

+ (NSMutableDictionary*)apiKeys
{
    static NSMutableDictionary* keys = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        keys = [NSMutableDictionary dictionary];
    });
    return keys;
}

+ (void)setApiKey:(NSString*)token forSecurityDefinition:(NSString*)securityName
{
    self.apiKeys[securityName] = token;
}

+ (void)setHeaderValue:(NSString*)value forHeader:(NSString*)header
{
    (*self.defaultHeaders)[header] = value;
}

+ (void)deleteHeader:(NSString*)header
{
    [(*self.defaultHeaders) removeObjectForKey:header];
}

+ (NSMutableDictionary* __strong *)defaultHeaders
{
    static NSMutableDictionary* dict = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        dict = [NSMutableDictionary dictionary];
    });
    return &dict;
}

+ (instancetype)operationWithBuilderBlock:(void(^)(id<{{ class_prefix }}OperationBuilder> *builder))builderBlock
{
    [[NSException exceptionWithName:@"GiantError" reason:@"Operation cannot be instantiated directly. Use an Operation subclass." userInfo:@{}] raise];
    return nil;
}

- (NSString*)method
{
    [[NSException exceptionWithName:@"GiantError" reason:@"Operation cannot be instantiated directly. Use an Operation subclass." userInfo:@{}] raise];
    return nil;
}

- (NSString*)URLString
{
    [[NSException exceptionWithName:@"GiantError" reason:@"Operation cannot be instantiated directly. Use an Operation subclass." userInfo:@{}] raise];
    return nil;
}

- (NSDictionary*)headers
{
    [[NSException exceptionWithName:@"GiantError" reason:@"Operation cannot be instantiated directly. Use an Operation subclass." userInfo:@{}] raise];
    return nil;
}

- (id)parameters
{
    [[NSException exceptionWithName:@"GiantError" reason:@"Operation cannot be instantiated directly. Use an Operation subclass." userInfo:@{}] raise];
    return nil;
}

- (BOOL)consumesJSON
{
    [[NSException exceptionWithName:@"GiantError" reason:@"Operation cannot be instantiated directly. Use an Operation subclass." userInfo:@{}] raise];
    return nil;
}

- (NSArray<NSString*>*)produces
{
    [[NSException exceptionWithName:@"GiantError" reason:@"Operation cannot be instantiated directly. Use an Operation subclass." userInfo:@{}] raise];
    return nil;
}

- (BOOL)isMultipart
{
    [[NSException exceptionWithName:@"GiantError" reason:@"Operation cannot be instantiated directly. Use an Operation subclass." userInfo:@{}] raise];
    return nil;
}

- (BOOL)isFileDownload
{
    [[NSException exceptionWithName:@"GiantError" reason:@"Operation cannot be instantiated directly. Use an Operation subclass." userInfo:@{}] raise];
    return nil;
}

- (NSURL*)filepath
{
    [[NSException exceptionWithName:@"GiantError" reason:@"Operation cannot be instantiated directly. Use an Operation subclass." userInfo:@{}] raise];
    return nil;
}

- (NSString*)securityDefinition
{
    [[NSException exceptionWithName:@"GiantError" reason:@"Operation cannot be instantiated directly. Use an Operation subclass." userInfo:@{}] raise];
    return nil;
}

- (void)start 
{
    if ([self isCancelled]) {
        self.finished = YES;
        return;
    }
    self.executing = YES;
    [self main];
}

- (void)main 
{
    {{ class_prefix }}LogInfo(@"Starting REST Operation");
    {{ class_prefix }}LogDebug(@"%@", self.task.currentRequest);
    {{ class_prefix }}LogDebug(@"%@", self.task.currentRequest.allHTTPHeaderFields);
    if(self.task.currentRequest.HTTPBody != nil) {
        {{ class_prefix }}LogDebug(@"%@", [NSString stringWithCString:self.task.currentRequest.HTTPBody.bytes encoding:NSUTF8StringEncoding]);
    }
    [self.task resume];
}

- (void)cancel
{
    [self.task cancel];
    [super cancel];
}
             
- (void)completeOperation 
{
    self.task = nil;
    self.executing = NO;
    self.finished  = YES;
}

#pragma mark - NSOperation methods

- (BOOL)isAsynchronous
{
    return YES;
}

- (BOOL)isExecuting 
{
    @synchronized(self) {
        return _executing;
    }
}

- (BOOL)isFinished 
{
    @synchronized(self) {
        return _finished;
    }
}

- (void)setExecuting:(BOOL)executing 
{
    if (_executing != executing) {
        [self willChangeValueForKey:@"isExecuting"];
        @synchronized(self) {
            _executing = executing;
        }
        [self didChangeValueForKey:@"isExecuting"];
    }
}

- (void)setFinished:(BOOL)finished 
{
    [self willChangeValueForKey:@"isFinished"];
    @synchronized(self) {
        if (_finished != finished) {
            _finished = finished;
        }
    }
    [self didChangeValueForKey:@"isFinished"];
}

@end

{%- for operation_name, operation in operations.iteritems() -%}
{%- set class_name = class_prefix + (operation_name|pascal_case) + 'Operation' -%}
{{ (ios.project_name + '/Operations/' + class_name)|start_of_file -}}
{{- ios.file_header(class_name+'.m') }}

#import "{{ class_name }}.h"
#import "{{ class_name }}Builder.h"
#import "{{ class_prefix }}JSONable.h"
#import <AFNetworking/AFNetworking.h>
{%- set response_import = operation|response_type_import(class_prefix) -%}
{%- if response_import != '' %}
{{ response_import }}
{%- endif %}
{%- for error_response_type in operation|error_response_types(class_prefix) %}
#import "{{ error_response_type[:-2] }}.h"
{%- endfor %}

@interface {{ class_name }} ()

@property (nonatomic, copy) {{ class_name }}Builder *builder;

@end

@implementation {{ class_name }} 

{%- if (operation|response_type(class_prefix)) != '' %}

@dynamic responseObject;

- (void)setResponseObject:(id)responseObject
{
    {%- if (operation|response_schema).type == 'array' %}
    NSMutableArray* objects = [NSMutableArray array];
    for(id<{{ class_prefix }}JSONable> jsonable in responseObject) {
        [objects addObject:[{{ (operation|response_schema|array_definition_items_type(class_prefix))[:-2] }} fromJSON:jsonable]];
    }
    [super setResponseObject:[objects copy]];
    {% else %}
    [super setResponseObject:[{{ (operation|response_type(class_prefix))[:-2] }} fromJSON:responseObject]];
    {%- endif %}
}
{%- endif %}

{%- for error_response_type in operation|error_response_types(class_prefix) %}

- ({{ error_response_type }}){{ (error_response_type + 'Object')[class_prefix|length:]|camel_case }}
{
    return [super errorResponseObject];
}

- (void)set{{ (error_response_type + 'Object')[class_prefix|length:]|pascal_case }}:(id)errorResponseObject
{
    {%- if (operation|error_response_schema).type == 'array' %}
    NSMutableArray* objects = [NSMutableArray array];
    for(id<{{ class_prefix }}JSONable> jsonable in errorResponseObject) {
        [objects addObject:[{{ (operation|error_response_schema|array_definition_items_type(class_prefix))[:-2] }} fromJSON:jsonable]];
    }
    [super setErrorResponseObject:[objects copy]];
    {% else %}
    [super setErrorResponseObject:[{{ error_response_type[:-2] }} fromJSON:errorResponseObject]];
    {%- endif %}
}
{%- endfor %}

+ (instancetype)operationWithBuilderBlock:(void(^)({{ class_name }}Builder *builder))builderBlock
{
    {{ class_name }}Builder *builder = [{{ class_name }}Builder new];
    builderBlock(builder);
    return [builder build];
}

- (instancetype)initWithBuilder:({{ class_name }}Builder *)builder
{
    if((self = [super init]) == nil) return nil;
    
    _builder = [builder copy];
    [self setupDataTask];
    
    return self;
}

- (NSString*)method
{
    return @"{{ operation.method|upper }}";
}

- (NSString*)URLString
{
    NSString* URLString = [NSString stringWithFormat:@"%@%@", self.class.urlBasePath, @"{{ operation.path_name }}"];
    {% for param in operation|parameters_in('path') -%}
    {%- set varname = 'self.builder.' + param.name|camel_case|objc_varname %}
    URLString = [URLString stringByReplacingOccurrencesOfString:@"{{ '{' + param.name + '}'}}" withString:{{ param|type_to_string(varname) }}];
    {%- endfor %}
    {%- set query_params = operation|parameters_in('query') %}
    {%- if query_params|length > 0 %}
    NSMutableArray* queryParameters = [NSMutableArray array];
    {%- for param in query_params %}
    if(self.builder.{{ param.name|camel_case }} != nil) {
        {%- if param.type == 'array' %}
        [queryParameters addObject:[NSString stringWithFormat:@"{{ param.name }}=%@", [self.builder.{{ param.name|camel_case }} componentsJoinedByString:@","]]];
        {%- else %}
        [queryParameters addObject:[NSString stringWithFormat:@"{{ param.name }}=%@", self.builder.{{ param.name|camel_case }}]];
        {%- endif %}
    }
    {%- endfor %}
    if(queryParameters.count > 0) {
        NSMutableCharacterSet* characterSet = NSCharacterSet.URLQueryAllowedCharacterSet.mutableCopy;
        [characterSet removeCharactersInString:@"+"];
        NSString* encodedParameters = [[queryParameters componentsJoinedByString:@"&"] stringByAddingPercentEncodingWithAllowedCharacters:characterSet];
        URLString = [NSString stringWithFormat:@"%@?%@", URLString, encodedParameters];
    }
    {%- endif %}
    
    return URLString;
}

- (NSDictionary*)headers
{
    {%- set header_params = operation|parameters_in('header') %}
    return @{
    {%- for param in header_params %}
        @"{{ param.name }}": self.builder.{{ param.name|camel_case }},
    {% endfor -%}
    };
}

- (id)parameters
{
    {%- set body_params = operation|parameters_in('body') %}
    {%- set form_params = operation|parameters_in('formData') %}
    {%- if body_params|length > 0 %}
    return self.builder.{{ (body_params|first).name|camel_case }};
    {%- elif form_params|length > 0 %}
    return @{
    {%- for param in form_params %}
        @"{{ param.name }}": self.builder.{{ param.name|camel_case }} ? self.builder.{{ param.name|camel_case }} : [NSNull null],{% endfor %}
    };
    {%- else %}
    return nil;
    {%- endif %}
}

- (BOOL)consumesJSON
{
    {% if 'application/json' in operation.consumes -%}
    return YES;
    {%- else -%}
    return NO;
    {%- endif %}
}

{%- if 'produces' in operation %}

- (NSArray<NSString*>*)produces
{
    return @[
        {%- for mimetype in operation.produces %}
        @"{{ mimetype }}",
        {%- endfor %}
    ];
}
{%- endif %}

- (BOOL)isMultipart
{
    {% if 'multipart/form-data' in operation.consumes -%}
    return YES;
    {%- else -%}
    return NO;
    {%- endif %}
}

- (BOOL)isFileDownload
{
    {% if (operation|response_schema).type == 'file' -%}
    return YES;
    {%- else -%}
    return NO;
    {%- endif %}
}

- (NSURL*)filepath
{
    {% if (operation|response_schema).type == 'file' -%}
    return self.builder.filepath;
    {%- else -%}
    return nil;
    {%- endif %}
}

- (NSString*)securityDefinition
{
    {%- if operation.security|length > 0 %}
    return @"{{ operation.security[0].keys()[0] }}";
    {%- else -%}
    return nil;
    {%- endif %}
}

@end
{% endfor %}