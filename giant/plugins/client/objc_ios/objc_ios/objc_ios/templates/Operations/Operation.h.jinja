{% import 'variables-ios.jinja' as ios with context %}
{% import 'variables.jinja' as vars with context %}
{{- (ios.project_name + '/Operations/' + class_prefix + 'Operation')|start_of_file -}}
{{- ios.file_header(class_prefix + 'Operation.h') }}

#import <Foundation/Foundation.h>
#import "{{ class_prefix }}OperationBuilder.h"

@protocol {{ class_prefix }}OperationProtocol <NSObject>

+ (instancetype)operationWithBuilderBlock:(void(^)(id<{{ class_prefix }}OperationBuilder> *builder))builderBlock;

@property (nonatomic, copy, readonly) NSString* method;
@property (nonatomic, copy, readonly) NSString* URLString;
@property (nonatomic, copy, readonly) NSDictionary* headers;
@property (nonatomic, strong, readonly) id parameters;
@property (nonatomic, assign, readonly) BOOL consumesJSON;
@property (nonatomic, assign, readonly) BOOL isMultipart;
@property (nonatomic, assign, readonly) BOOL isFileDownload;
@property (nonatomic, copy, readonly) NSURL* filepath;
@property (nonatomic, copy, readonly) NSString* securityDefinition;
@property (nonatomic, copy, readonly) NSSet<NSString*>* produces;

@end

@class AFHTTPSessionManager, AFHTTPRequestSerializer;

@interface {{ class_prefix }}Operation: NSOperation <{{ class_prefix }}OperationProtocol>

+ (void)setURLRoot:(NSString*)host;
+ (void)setApiKey:(NSString*)token forSecurityDefinition:(NSString*)securityName;
+ (void)setHeaderValue:(NSString*)value forHeader:(NSString*)header;

+ (void)pinPublicKeysForCertificatesNamed:(NSArray<NSString*>*)names;
+ (void)pinCertificatesNamed:(NSArray<NSString*>*)names;
+ (void)pinPublicKeyForCertificateNamed:(NSString*)name;
+ (void)pinCertificateNamed:(NSString*)name;
+ (void)allowInvalidCertificates __attribute__((deprecated("Not actually deprecated, but DO NOT USE THIS SETTING IN PRODUCTION!")));

- (void)setupDataTask;

@property (nonatomic, strong) NSError* error;
@property (nonatomic, strong) NSURLResponse* response;
@property (nonatomic, strong) id responseObject;
@property (nonatomic, strong) id errorResponseObject;

@end

{%- for operation_name, operation in operations.iteritems() -%}
{%- set operation_name = operation_name|pascal_case -%}
{%- set class_name = class_prefix + operation_name + 'Operation' -%}
{{ (ios.project_name + '/Operations/' + class_name)|start_of_file -}}
{{- ios.file_header(class_name + '.h') }}
#import "{{ class_prefix }}Operation.h"
#import "{{ class_name }}Builder.h"
{%- set forward_decl = operation|response_type_forward_decl(class_prefix) %}

{%- if forward_decl != '' %}

{{ forward_decl }}
{%- endif %}
{%- for error_response_type in operation|error_response_types(class_prefix) %}
@class {{ error_response_type[:-2] }};

{%- endfor %}

@interface {{ class_name }}: {{ class_prefix }}Operation <{{ class_prefix }}OperationProtocol>

+ (instancetype)operationWithBuilderBlock:(void(^)({{ class_name }}Builder *builder))builderBlock;

- (instancetype)initWithBuilder:({{ class_name }}Builder *)builder;

{% if (operation|response_type(class_prefix)) != '' -%}
@property (nonatomic, strong) {{ operation|response_type(class_prefix) }} responseObject;
{% endif -%}
{%- for error_response_type in operation|error_response_types(class_prefix) %}
@property (nonatomic, strong) {{ error_response_type }} {{ (error_response_type + 'Object')[class_prefix|length:]|camel_case }};
{%- endfor %}

@end
{% endfor %}