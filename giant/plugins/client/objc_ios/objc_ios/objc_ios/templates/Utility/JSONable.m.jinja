{% import 'variables-ios.jinja' as ios with context %}
{% import 'variables.jinja' as vars with context %}
{{ (ios.project_name + '/' + class_prefix + 'JSONable')|start_of_file -}}
{{- ios.file_header(class_prefix + 'JSONable.m') }}
#import <Foundation/Foundation.h>
#import "{{ class_prefix }}JSONable.h"
#import "NSDate+{{ class_prefix }}ISO8601.h"

@implementation NSDictionary ({{ class_prefix }}JSONable)

- (id<{{ class_prefix }}JSONable>)toJSON;
{
    NSMutableDictionary* jsoned = [NSMutableDictionary dictionary];
    for (NSString* key in self) {
        id<{{ class_prefix }}JSONable> value = self[key];
        jsoned[key] = [value toJSON];
    }
    return [jsoned copy];
}

+ (instancetype)fromJSON:(id<{{ class_prefix }}JSONable>)json
{
    return [NSDictionary dictionaryWithDictionary:(NSDictionary*)json];
}

@end

@implementation NSArray ({{ class_prefix }}JSONable)

- (id<{{ class_prefix }}JSONable>)toJSON;
{
    NSMutableArray* jsoned = [NSMutableArray array];
    for (id<{{ class_prefix }}JSONable> value in self) {
        [jsoned addObject:[value toJSON]];
    }
    return [jsoned copy];
}

+ (instancetype)fromJSON:(id<{{ class_prefix }}JSONable>)json
{
    return [NSArray arrayWithArray:(NSArray*)json];
}

@end

@implementation NSDate ({{ class_prefix }}JSONable)

+ (NSDateFormatter*)dateFormatterForFormat:(NSString*)format
{
    static NSMutableDictionary* formatters;
    if (formatters == nil) {
        formatters = [NSMutableDictionary new];
    }
    NSDateFormatter* formatter = formatters[format];
    if(formatter == nil) {
        formatter = [NSDateFormatter new];
        formatter.dateFormat = format;
        formatters[format] = formatter;
    }
    return formatter;
}

- (id<{{ class_prefix }}JSONable>)toJSON
{
    return self.{{ class_prefix }}_iso8601;
}

- (id<{{ class_prefix }}JSONable>)toJSONWithFormat:(NSString*)format
{
    NSDateFormatter* dateFormatter = [self.class dateFormatterForFormat:format];
    return [dateFormatter stringFromDate:self];
}

+ (instancetype)fromJSON:(id<{{ class_prefix }}JSONable>)json
{
    return [NSDate {{ class_prefix }}_dateWithISO8601String:(NSString *)json];
}

+ (instancetype)fromJSON:(id<{{ class_prefix }}JSONable>)json withFormat:(NSString*)format
{
    NSDateFormatter* dateFormatter = [self dateFormatterForFormat:format];
    return [dateFormatter dateFromString:(NSString *)json];
}

@end

@implementation NSString ({{ class_prefix }}JSONable)

- (id<{{ class_prefix }}JSONable>)toJSON
{
    return self;
}

+ (instancetype)fromJSON:(id<{{ class_prefix }}JSONable>)json
{
    return [(NSString *)json copy];
}

@end

@implementation NSNumber ({{ class_prefix }}JSONable)

- (id<{{ class_prefix }}JSONable>)toJSON
{
    return self;
}

+ (instancetype)fromJSON:(id<{{ class_prefix }}JSONable>)json
{
    return [(NSNumber *)json copy];
}

@end

@implementation NSURL (AECPJSONable)

- (id<AECPJSONable>)toJSON
{
    return self;
}

+ (instancetype)fromJSON:(id<AECPJSONable>)json
{
    return [(NSURL *)json copy];
}

@end

@implementation NSData (AECPJSONable)

- (id<AECPJSONable>)toJSON
{
    return self;
}

+ (instancetype)fromJSON:(id<AECPJSONable>)json
{
    return [(NSURL *)json copy];
}

@end
