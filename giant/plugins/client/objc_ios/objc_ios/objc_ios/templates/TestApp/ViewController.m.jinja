{% import 'variables-ios.jinja' as ios with context %}
{% import 'variables.jinja' as vars with context %}
{{ (vars.api_name + '/' + class_prefix + 'ViewController')|start_of_file -}}
{{- ios.file_header(class_prefix + 'ViewController.m') }}
#import "{{ class_prefix }}ViewController.h"
#import <AFNetworking/AFNetworking.h>
{% for definition_name, definition in swagger.definitions.iteritems() if definition.type == 'object' -%}
#import "{{ class_prefix }}{{ definition_name }}.h"
{% endfor %}
{% for operation_name in operations -%}
#import "{{ class_prefix }}{{ operation_name|pascal_case }}Operation.h"
{% endfor %}

@interface {{ class_prefix }}ViewController () <UITableViewDelegate, UITableViewDataSource>

@property (nonatomic, weak) IBOutlet UITextView* logOutputView;

@end

@implementation {{ class_prefix }}ViewController

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return {{ operations|length }};
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    UITableViewCell* cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"OperationCell"];
    switch(indexPath.row) {
        {%- for operation_name, operation in operations.iteritems() %}
        case {{ loop.index - 1 }}:
            cell.textLabel.text = @"{{ operation_name }}";
            break;
        {%- endfor %}
    }
    return cell;
}

- (void)logError:(NSError*)error operationName:(NSString*)operationName
{
    NSDictionary* data = error.userInfo;
    NSURL* url = data[NSURLErrorFailingURLErrorKey];
    NSString* reason = data[NSLocalizedDescriptionKey];
    NSHTTPURLResponse* response = data[AFNetworkingOperationFailingURLResponseErrorKey];
    NSData* responseData = error.userInfo[AFNetworkingOperationFailingURLResponseDataErrorKey];
    NSString* responseText = [[NSString alloc] initWithData:responseData encoding:NSUTF8StringEncoding];
    [self log:[NSString stringWithFormat:@"%@ Failure!\nURL: %@\nReason: %@\nResponse: %@\nBody: %@", 
        operationName, url, reason, response, responseText]];
}

- (void)logSuccess:(id)response operationName:(NSString*)operationName
{
    [self log:[NSString stringWithFormat:@"%@ Success!", operationName]];
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    switch(indexPath.row) {
        {%- for operation_name, operation in operations.iteritems() %}
        
        case {{ loop.index - 1 }}: {
            __block {{ class_prefix }}{{ operation_name|pascal_case }}Operation* operation = [{{ class_prefix }}{{ operation_name|pascal_case }}Operation operationWithBuilderBlock:^({{ class_prefix }}{{ operation_name|pascal_case }}OperationBuilder *builder) {
                {%- if operation.parameters is not undefined -%}
                {%- for param in operation.parameters %}
                builder.{{ (param|get_parameter).name|camel_case }} = {{ param|example_parameter }};
                {%- endfor %}
                {%- endif %}
            }];
            __weak {{ class_prefix }}ViewController* weakSelf = self;
            operation.completionBlock = ^{
                if(operation.error == nil) {
                    {% if 'x-provides-api-key' in operation -%}
                    [{{ class_prefix }}Operation setApiKey:operation.responseObject.accessToken forSecurityDefinition:@"{{ operation['x-provides-api-key'] }}"];
                    {%- endif %}
                    [weakSelf logSuccess:nil operationName:@"{{ operation_name }}"];
                }
                else {
                    [weakSelf logError:operation.error operationName:@"{{ operation_name }}"];
                }
                operation = nil;
            };
            [operation start];
            break;
        }
        {%- endfor %}
    }
}

- (void)log:(NSString*)string
{
    dispatch_async(dispatch_get_main_queue(), ^{
        NSDate* currentDate = [NSDate date];
        NSDateFormatter* formatter = [[NSDateFormatter alloc] init];
        formatter.timeStyle = NSDateFormatterShortStyle;
        formatter.dateStyle = NSDateFormatterShortStyle;
        self.logOutputView.text = [self.logOutputView.text stringByAppendingFormat:@"\n%@: %@", [formatter stringFromDate:currentDate], string];
        NSRange range = NSMakeRange(self.logOutputView.text.length - 1, 1);
        [self.logOutputView scrollRangeToVisible:range];
    });
}

@end
