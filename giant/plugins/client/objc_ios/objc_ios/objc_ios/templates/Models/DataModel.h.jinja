{% import 'variables.jinja' as vars with context %}
{% import 'variables-ios.jinja' as ios with context %}
{% for definition_name, definition in swagger.definitions.iteritems() if definition.type == 'object' %}
{%- set class_name = class_prefix+definition_name -%}
{{ (ios.project_name + '/Models/' + class_name)|start_of_file -}}
{{- ios.file_header(class_name) }}
#import <Foundation/Foundation.h>
#import "{{ class_prefix }}JSONable.h"
{% if 'x-persist' in definition and definition['x-persist'] -%}
#import <Realm/Realm.h>
#import "{{ class_prefix }}RealmPrimitives.h"
{%- for property_name, property in definition.properties.iteritems() -%}
{%- set prop_import = property|realm_property_import(class_prefix) -%}
{%- if prop_import is not none %}
{{ prop_import }}
{%- endif -%}
{%- endfor -%}
{%- elif 'properties' in definition -%}
{%- for property_name, property in definition.properties.iteritems() %}
{%- if property.type == 'array' and '$ref' in property['items'] %}
#import "{{ property['items']|property_array_items_type(class_prefix) }}.h"
{%- endif %}
{%- endfor %}
{%- endif %}
{%- if 'properties' in definition -%}
{%- for property_name, property in definition.properties.iteritems() %}
{%- if 'enum' in property and property.type == 'string' %}
{% for enum in property.enum %}
extern NSString * const {{ class_name }}{{ property_name|pascal_case }}{{ enum|pascal_case }};
{%- endfor %}
{%- endif %}
{%- endfor %}
{%- endif %}

@interface {{ class_name }}: {{ definition|model_base_type }} <{{ class_prefix }}JSONable>
{% if 'properties' in definition %}
{%- for property_name, property in definition.properties.iteritems() %}
@property (nonatomic, strong) {{ property|property_type(class_prefix) }} {{ property_name|camel_case|objc_varname }};
{%- endfor %}
{%- endif %}

- (NSDictionary*)toJSON;

@end
{%- if 'x-persist' in definition and definition['x-persist'] %}
RLM_ARRAY_TYPE({{ class_name }})
{%- endif -%}
{%- endfor %}