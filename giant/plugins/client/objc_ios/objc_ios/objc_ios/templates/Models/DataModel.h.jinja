{% import 'variables.jinja' as vars with context %}
{% import 'variables-ios.jinja' as ios with context %}
{% for definition_name, definition in swagger.definitions.iteritems() if definition.type == 'object' %}
{%-  set class_name = class_prefix+definition_name -%}
{{ (ios.project_name + '/Models/' + class_name)|start_of_file -}}
{{- ios.file_header(class_name) }}
#import <Foundation/Foundation.h>
#import "{{ class_prefix }}JSONable.h"
{%    if 'allOf' in definition -%}
#import "{{ class_prefix }}{{ definition['allOf'][0]['$ref'].split('/')[-1]}}.h"
{%-   endif %}
{%-   if 'x-persist' in definition and definition['x-persist'] %}
#import <Realm/Realm.h>
#import "{{ class_prefix }}RealmPrimitives.h"
{%-    for property_name, property in definition|definition_properties(true) -%}
{%-      set prop_import = property|realm_property_import(class_prefix) -%}
{%-      if prop_import is not none %}
{{ prop_import }}
{%-      endif -%}
{%-    endfor -%}
{%-  elif 'properties' in definition or 'allOf' in definition -%}
{%-    for property_name, property in definition|definition_properties %}
{%-      if property.type == 'array' and '$ref' in property['items'] %}
#import "{{ property['items']|property_array_items_type(class_prefix) }}.h"
{%-      endif %}
{%-    endfor %}
{%-  endif %}
{%-  if 'x-relations' in definition %}
{%-    for relation_name, relation in definition['x-relations'].iteritems() if 'link' not in relation %}
{%-      set prop_import = relation|realm_property_import(class_prefix) -%}
{%-      if prop_import is not none %}
{{ prop_import }}
{%-      endif -%}
{%-    endfor %}
{%-  endif %}
{%-  if 'properties' in definition or 'allOf' in definition -%}
{%-    for property_name, property in definition|definition_properties %}
{%-      if 'enum' in property and property.type == 'string' %}
{%         for enum in property.enum %}
extern NSString * const {{ class_name }}{{ property_name|pascal_case }}{{ enum|pascal_case }};
{%-        endfor %}
{%-      endif %}
{%-    endfor %}
{%-  endif %}

@interface {{ class_name }}: {{ definition|model_base_type(class_prefix) }} <{{ class_prefix }}JSONable>
{%   if 'properties' in definition or 'allOf' in definition %}
{%-    for property_name, property in definition|definition_properties(true) %}
@property (nonatomic, strong) {{ property|property_type(class_prefix) }} {{ property_name|camel_case|objc_varname }};
{%-    endfor %}
{%-  endif %}
{%   if 'x-relations' in definition %}
{%-    for relation_name, relation in definition['x-relations'].iteritems() %}
{%-      if 'link' in relation %}
@property (nonatomic, strong, readonly) RLMLinkingObjects *{{ relation_name|camel_case|objc_varname }};
{%-      else %}
@property (nonatomic, strong) {{ relation|property_type(class_prefix, true) }} {{ relation_name|camel_case|objc_varname }};
{%-      endif %}
{%-    endfor %}
{%-  endif %}
{%   if 'x-primary-key' in definition and definition['x-primary-key'] is not string %}
@property (nonatomic, readonly) NSString* compositeKey;
{%-  endif %}
- (NSDictionary*)toJSON;

@end
{%-  if 'x-persist' in definition and definition['x-persist'] %}
RLM_ARRAY_TYPE({{ class_name }})
{%-  endif -%}
{%- endfor %}