{% import 'variables.jinja' as vars with context %}
{% import 'variables-ios.jinja' as ios with context %}
{% for definition_name, definition in swagger.definitions.iteritems() if definition.type == 'object' %}
{% set filename = vars.api_name + '/Models/' + definition_name %}
{{ filename|start_of_file -}}
{{- ios.file_header(definition_name) }}

#import "{{ definition_name }}.h"
{%- if 'properties' in definition %}
{%- for property_name, property in definition.properties.iteritems() %}
{%- if property.type == 'array' and '$ref' in property['items'] %}
#import "{{ (property|array_definition_items_type)[:-2] }}.h"
{%- elif (property.type == 'object' or 'type' not in property) and 'properties' in property %}
#import "{{ (property|property_type)[:-2] }}.h"
{%- endif %}
{%- endfor -%}
{%- endif %}

@implementation {{ definition_name }}

- (NSDictionary*)toJSON
{
    return @{
      {%- if 'properties' in definition -%}
      {%- for property_name, property in definition.properties.iteritems() %}
      @"{{ property_name }}": [self.{{ property_name|camel_case|objc_varname }} toJSON],
      {%- endfor -%}
      {%- endif %}
    };
}

+ (instancetype)fromJSON:(id<JSONable>)json
{
    {{ definition_name }} *model = [self new];
    {%- if 'properties' in definition -%}
    {%- for property_name, property in definition.properties.iteritems() %}
    {%- if property.type == 'array' %}
    model.{{ property_name|camel_case|objc_varname }} = ^{
        NSArray* array = json[@"{{ property_name }}"];
        NSMutableArray* items = [NSMutableArray array];
        for(id<JSONable> jsonable in array) {
            [items addObject:[{{ (property|array_definition_items_type)[:-2] }} fromJSON:jsonable]];
        }
        return [items copy];
    }();
    {%- elif property.type == 'object' or 'type' not in property %}
    model.{{ property_name|camel_case|objc_varname }} = [{{ (property|property_type)[:-2] }} fromJSON:json[@"{{ property_name }}"]];
    {%- else %}
    model.{{ property_name|camel_case|objc_varname }} = json[@"{{ property_name }}"];
    {%- endif %}
    {%- endfor -%}
    {%- endif %}
    return model;
}
{% if 'properties' in definition %}
{%- for property_name, property in definition.properties.iteritems() if 'enum' in property and property.type == 'string' %}
- ({{ definition_name }}{{ property_name|pascal_case }}){{ (definition_name + property_name|pascal_case)|camel_case|objc_varname }}
{
    return ((NSNumber*)@{
    {%- for enum in property.enum %}
        {%- if property.type == 'string' %}
        {%- set enum_key = '@"' + enum + '"' %}
        {%- else %}
        {%- set enum_key = '@(' + enum + ')' %}
        {%- endif %}
        {{ enum_key }}: @({{ definition_name }}{{ property_name|pascal_case }}{{ enum|pascal_case }}),
    {%- endfor %}
    }[self.{{ property_name|camel_case|objc_varname }}]).unsignedIntegerValue;
}
{% endfor %}
{%- endif %}
@end
{%- endfor %}