{% import 'variables.jinja' as vars with context %}
{% import 'variables-ios.jinja' as ios with context %}
{% for definition_name, definition in swagger.definitions.iteritems() if definition.type == 'object' %}
{%- set class_name = class_prefix+definition_name -%}
{% set filename = ios.project_name + '/Models/' + class_name %}
{{ filename|start_of_file -}}
{{- ios.file_header(class_name) }}

#import "{{ class_name }}.h"
{%- if 'properties' in definition or 'allOf' in definition %}
{%-   for property_name, property in definition|definition_properties(true) %}
{%-     if property.type == 'array' and '$ref' in property['items'] %}
{%-       if 'polymorphic_type' in property %}
#import "{{ class_prefix }}{{ property.polymorphic_type }}.h"
{%-       else %}
#import "{{ (property|array_definition_items_type(class_prefix))[:-2] }}.h"
{%-       endif %}
{%-     elif (property.type == 'object' or 'type' not in property) and 'properties' in property %}
#import "{{ (property|property_type)[:-2] }}.h"
{%-     endif %}
{%-   endfor -%}
{%- endif %}
{%- if 'discriminator' in definition %}
{%-   for type in definition['x-subtypes'] %}
#import "{{ class_prefix }}{{ type }}.h"
{%- endfor %}
{%- endif %}
{%- if 'x-relations' in definition %}
{%-   for relation_name, relation in definition['x-relations'].iteritems() if 'link' in relation %}
{%-     set prop_import = relation|realm_property_import(class_prefix) -%}
{%-     if prop_import is not none %}
{{ prop_import }}
{%-     endif -%}
{%-   endfor %}
{%- endif %}

{%- if 'x-primary-key' in definition and definition['x-primary-key'] is not string %}
@interface {{ class_name }} ()

@property (nonatomic, strong) NSString* compositeKey;
{%-   for key in definition['x-primary-key'] %}
@property (nonatomic, strong) NSString* {{ key|camel_case|objc_varname }}Value;
{%-   endfor %}

@end
{%- endif %}

@implementation {{ class_name }}
{%- if 'properties' in definition or 'allOf' in definition %}
{%-   for property_name, property in definition|definition_properties %}
{%-     if 'enum' in property and property.type == 'string' %}
{%        for enum in property.enum %}
NSString * const {{ class_name }}{{ property_name|pascal_case }}{{ enum|pascal_case }} = @"{{ enum }}";
{%-       endfor %}
{%-     endif %}
{%-   endfor %}
{%- endif %}

- (NSDictionary*)toJSON
{
    {%- if 'allOf' in definition %}
    NSMutableDictionary* json = [[super toJSON] mutableCopy];
    {% else %}
    NSMutableDictionary* json = [NSMutableDictionary dictionary];
    {%- endif -%}
    {%- if 'properties' in definition or 'allOf' in definition -%}
    {%- for property_name, property in definition|definition_properties(true) %}
    if(self.{{ property_name|camel_case|objc_varname }} != nil) {
    {%- if property.type == 'string' and property.format == 'date' %}
        {%- if 'original_name' in property %}
        if(json[@"{{ property['original_name'] }}"] == nil) {
            json[@"{{ property['original_name'] }}"] = [NSMutableArray new];
        }
        [(NSMutableArray*)json[@"{{ property['original_name'] }}"] addObjectsFromArray:(NSArray*)[self.{{ property_name|camel_case|objc_varname }} toJSONWithFormat:@"yyyy-MM-dd"]];
        {%- else %}
        json[@"{{ property_name }}"] = [self.{{ property_name|camel_case|objc_varname }} toJSONWithFormat:@"yyyy-MM-dd"];
        {%- endif %}
    {%- else %}
        {%- if 'original_name' in property %}
        if(json[@"{{ property['original_name'] }}"] == nil) {
            json[@"{{ property['original_name'] }}"] = [NSMutableArray new];
        }
        [(NSMutableArray*)json[@"{{ property['original_name'] }}"] addObjectsFromArray:(NSArray*)[self.{{ property_name|camel_case|objc_varname }} toJSON]];
        {%- else %}
        json[@"{{ property_name }}"] = [self.{{ property_name|camel_case|objc_varname }} toJSON];
        {%- endif %}
    {%- endif %}
    }
    {%- endfor -%}
    {%- endif %}
    return [json copy];
}

+ (instancetype)fromJSON:(id<{{ class_prefix }}JSONable>)json
{
    {%- if 'discriminator' in definition %}
    {{ class_name }} *model;
    {%-   for type in definition['x-subtypes'] %}
    if([json[@"{{ definition.discriminator }}"] isEqualToString:@"{{ type }}"]) {
        model = [{{ class_prefix }}{{ type }} fromJSON:json];
    }
    {%-   endfor %}
    {%- else %}
    {{ class_name }} *model = [self new];
    {%- endif -%}
    {%- if 'properties' in definition or 'allOf' in definition -%}
    {%- for property_name, property in definition|definition_properties(true) %}
    {%- set prop_name = property['original_name'] or property_name %}
    if(json[@"{{ prop_name }}"] != nil && ![json[@"{{ prop_name }}"] isEqual:NSNull.null]) {
    {%- if property.type == 'array' %}
        model.{{ property_name|camel_case|objc_varname }} = ^{
            NSArray* array = json[@"{{ prop_name }}"];
            NSMutableArray* items = [NSMutableArray array];
            for(id<{{ class_prefix }}JSONable> jsonable in array) {
                {%- if property.polymorphic_type|length > 0 %}
                if([jsonable[@"{{ property.base_type.discriminator }}"] isEqualToString:@"{{ property.polymorphic_type }}"]) {
                    [items addObject:[{{ class_prefix }}{{ property.base_type.name }} fromJSON:jsonable]];
                }
                {%- else %}
                [items addObject:[{{ (property|array_definition_items_type(class_prefix))[:-2] }} fromJSON:jsonable]];
                {%- endif %}
            }
            return [items copy];
        }();
    {%- elif property.type == 'string' and property.format == 'date' %}
        model.{{ prop_name|camel_case|objc_varname }} = [{{ (property|property_type(class_prefix))[:-2] }} fromJSON:json[@"{{ property_name }}"] withFormat:@"yyyy-MM-dd"];
    {%- else %}
        model.{{ prop_name|camel_case|objc_varname }} = [{{ (property|property_type(class_prefix))[:-2] }} fromJSON:json[@"{{ property_name }}"]];
    {%- endif %}
    }
    {%- endfor -%}
    {%- endif %}
    return model;
}
{%- if 'x-relations' in definition and (definition['x-relations']['values']())|selectattr('link', 'defined')|list|count > 0 %}

+ (NSDictionary *)linkingObjectsProperties {
    return @{ 
        {%- for relation_name, relation in definition['x-relations'].iteritems() %}
        {%- if 'link' in relation %}
        @"{{ relation_name|camel_case|objc_varname }}": [RLMPropertyDescriptor descriptorWithClass:{{ (relation|property_type(class_prefix, true))[:-2] }}.class propertyName:@"{{ relation['link'] }}"],
        {%- endif %}
        {%- endfor %}
    };
}
{%- endif %}
{% if 'x-primary-key' in definition %}
{% if definition['x-primary-key'] is string %}
+ (NSString *)primaryKey
{
    return @"{{ definition['x-primary-key']|camel_case|objc_varname }}";
}
{% else %}
- (instancetype)initWithValue:(id)value
{
    NSMutableDictionary* valueCopy = [value mutableCopy];
    {% for key in definition['x-primary-key'] %}
    if(valueCopy[@"{{ key|camel_case|objc_varname }}"] != nil) {
        valueCopy[@"{{ key|camel_case|objc_varname }}Value"] = valueCopy[@"{{ key|camel_case|objc_varname }}"];
    }
    {%- endfor %}
    
    self = [super initWithValue:[valueCopy copy]];
    if(self != nil) {
        [self updatePrimaryKey];
    }
    return self;
}
{%- for key in definition['x-primary-key'] %}

- (void)set{{ key|pascal_case|objc_varname }}:(NSString*)value
{
    self.{{ key|camel_case|objc_varname }}Value = value;
    [self updatePrimaryKey];
}

- (NSString*){{ key|camel_case|objc_varname }}
{
    return self.{{ key|camel_case|objc_varname }}Value;
}
{%- endfor %}

+ (NSArray<NSString*>*)ignoredProperties
{
    return @[
    {%- for key in definition['x-primary-key'] %}
        @"{{ key|camel_case|objc_varname }}",
    {%- endfor %}
    ];
}

- (void)updatePrimaryKey
{
    NSMutableString* key = [NSMutableString string];
    {%- for key in definition['x-primary-key'] %}
        {%- if not loop.first %}
    [key appendFormat:@" <><><> %@", self.{{ key|camel_case|objc_varname }}];
        {%- else %}
    [key appendString:self.{{ key|camel_case|objc_varname }} ?: @""];
        {%- endif %}
    {%- endfor %}
    self.compositeKey = [key copy];
}

+ (NSString *)primaryKey
{
    return @"compositeKey";
}

+ (RLMResults *)objectsWhere:(NSString *)predicateFormat args:(va_list)args {
    {% for key in definition['x-primary-key'] %}
    predicateFormat = [predicateFormat stringByReplacingOccurrencesOfString:@"{{ key|camel_case|objc_varname }}" withString:@"{{ key|camel_case|objc_varname }}Value"];
    {%- endfor %}
    return [self objectsWithPredicate:[NSPredicate predicateWithFormat:predicateFormat arguments:args]];
}

+ (RLMResults *)objectsInRealm:(RLMRealm *)realm where:(NSString *)predicateFormat args:(va_list)args {
    {% for key in definition['x-primary-key'] %}
    predicateFormat = [predicateFormat stringByReplacingOccurrencesOfString:@"{{ key|camel_case|objc_varname }}" withString:@"{{ key|camel_case|objc_varname }}Value"];
    {%- endfor %}
    return [self objectsInRealm:realm withPredicate:[NSPredicate predicateWithFormat:predicateFormat arguments:args]];
}
{% endif %}
{% endif %}
@end
{%- endfor %}