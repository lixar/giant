{% import 'variables.jinja' as vars with context %}
{% import 'variables-ios.jinja' as ios with context %}
{% for definition_name, definition in swagger.definitions.iteritems() if definition.type == 'object' %}
{%- set class_name = class_prefix+definition_name -%}
{% set filename = ios.project_name + '/Models/' + class_name %}
{{ filename|start_of_file -}}
{{- ios.file_header(class_name) }}

#import "{{ class_name }}.h"
{%- if 'properties' in definition %}
{%- for property_name, property in definition.properties.iteritems() %}
{%- if property.type == 'array' and '$ref' in property['items'] %}
#import "{{ (property|array_definition_items_type(class_prefix))[:-2] }}.h"
{%- elif (property.type == 'object' or 'type' not in property) and 'properties' in property %}
#import "{{ (property|property_type)[:-2] }}.h"
{%- endif %}
{%- endfor -%}
{%- endif %}

{%- if 'x-primary-key' in definition and definition['x-primary-key'] is not string %}
@interface {{ class_name }} ()

@property (nonatomic, strong) NSString* compositeKey;
{%- for key in definition['x-primary-key'] %}
@property (nonatomic, strong) NSString* {{ key|camel_case|objc_varname }}Value;
{%- endfor %}

@end
{%- endif %}

@implementation {{ class_name }}
{%- if 'properties' in definition %}
{%- for property_name, property in definition.properties.iteritems() %}
{%- if 'enum' in property and property.type == 'string' %}
{% for enum in property.enum %}
NSString * const {{ class_name }}{{ property_name|pascal_case }}{{ enum|pascal_case }} = @"{{ enum }}";
{%- endfor %}
{%- endif %}
{%- endfor %}
{%- endif %}

- (NSDictionary*)toJSON
{
    NSMutableDictionary* json = [NSMutableDictionary dictionary];
    {%- if 'properties' in definition -%}
    {%- for property_name, property in definition.properties.iteritems() %}
    if(self.{{ property_name|camel_case|objc_varname }} != nil) {
        json[@"{{ property_name }}"] = [self.{{ property_name|camel_case|objc_varname }} toJSON];
    }
    {%- endfor -%}
    {%- endif %}
    return [json copy];
}

+ (instancetype)fromJSON:(id<{{ class_prefix }}JSONable>)json
{
    {{ class_name }} *model = [self new];
    {%- if 'properties' in definition -%}
    {%- for property_name, property in definition.properties.iteritems() %}
    {%- if property.type == 'array' %}
    model.{{ property_name|camel_case|objc_varname }} = ^{
        NSArray* array = json[@"{{ property_name }}"];
        NSMutableArray* items = [NSMutableArray array];
        for(id<{{ class_prefix }}JSONable> jsonable in array) {
            [items addObject:[{{ (property|array_definition_items_type(class_prefix))[:-2] }} fromJSON:jsonable]];
        }
        return [items copy];
    }();
    {%- else %}
    model.{{ property_name|camel_case|objc_varname }} = [{{ (property|property_type(class_prefix))[:-2] }} fromJSON:json[@"{{ property_name }}"]];
    {%- endif %}
    {%- endfor -%}
    {%- endif %}
    return model;
}
{% if 'x-primary-key' in definition %}
{% if definition['x-primary-key'] is string %}
+ (NSString *)primaryKey
{
    return @"{{ definition['x-primary-key']|camel_case|objc_varname }}";
}
{% else %}
- (instancetype)initWithValue:(id)value
{
    NSMutableDictionary* valueCopy = [value mutableCopy];
    {% for key in definition['x-primary-key'] %}
    if(valueCopy[@"{{ key|camel_case|objc_varname }}"] != nil) {
        valueCopy[@"{{ key|camel_case|objc_varname }}Value"] = valueCopy[@"{{ key|camel_case|objc_varname }}"];
    }
    {%- endfor %}
    
    self = [super initWithValue:[valueCopy copy]];
    if(self != nil) {
        [self updatePrimaryKey];
    }
    return self;
}
{%- for key in definition['x-primary-key'] %}

- (void)set{{ key|pascal_case|objc_varname }}:(NSString*)value
{
    self.{{ key|camel_case|objc_varname }}Value = value;
    [self updatePrimaryKey];
}

- (NSString*){{ key|camel_case|objc_varname }}
{
    return self.{{ key|camel_case|objc_varname }}Value;
}
{%- endfor %}

+ (NSArray<NSString*>*)ignoredProperties
{
    return @[
    {%- for key in definition['x-primary-key'] %}
        @"{{ key|camel_case|objc_varname }}",
    {%- endfor %}
    ];
}

- (void)updatePrimaryKey
{
    NSMutableString* key = [NSMutableString string];
    {%- for key in definition['x-primary-key'] %}
        {%- if not loop.first %}
    [key appendFormat:@" <><><> %@", self.{{ key|camel_case|objc_varname }}];
        {%- else %}
    [key appendString:self.{{ key|camel_case|objc_varname }} ?: @""];
        {%- endif %}
    {%- endfor %}
    self.compositeKey = [key copy];
}

+ (NSString *)primaryKey
{
    return @"compositeKey";
}
{% endif %}
{% endif %}
@end
{%- endfor %}