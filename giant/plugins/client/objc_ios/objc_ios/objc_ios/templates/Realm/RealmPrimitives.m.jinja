{% import 'variables-ios.jinja' as ios with context %}
{% import 'variables.jinja' as vars with context %}
{{ (ios.project_name + '/' + class_prefix + 'RealmPrimitives')|start_of_file -}}
{{- ios.file_header(class_prefix + 'RealmPrimitives.m') }}

#import "NSDate+{{ class_prefix }}ISO8601.h"
#import "{{ class_prefix }}RealmPrimitives.h"

@implementation {{ class_prefix }}RealmString @end

@implementation {{ class_prefix }}RealmInteger @end

@implementation {{ class_prefix }}RealmFloat @end

@implementation {{ class_prefix }}RealmDouble @end

@implementation {{ class_prefix }}RealmBool @end

@implementation {{ class_prefix }}RealmDate @end

@implementation {{ class_prefix }}RealmData @end

@implementation {{ class_prefix }}RealmDate ({{ class_prefix }}JSONable)

- (id<{{ class_prefix }}JSONable>)toJSON
{
    return self.value.{{ class_prefix }}_iso8601;
}

+ (instancetype)fromJSON:(id<{{ class_prefix }}JSONable>)json
{
    {{ class_prefix }}RealmDate* object = [self new];
    object.value = [NSDate {{ class_prefix }}_dateWithISO8601String:(NSString*)json];
    return object;
}

- (BOOL)isEqual:(id)object
{
    if(object == self) {
        return YES;
    }
    if([super isEqualToObject:object]) {
        return YES;
    }
    if(![object isMemberOfClass:self.class]) {
        return NO;
    }
    return [self.value isEqual:[object value]];
}

@end

@implementation {{ class_prefix }}RealmString ({{ class_prefix }}JSONable)

- (id<{{ class_prefix }}JSONable>)toJSON
{
    return self.value;
}

+ (instancetype)fromJSON:(id<{{ class_prefix }}JSONable>)json
{
    {{ class_prefix }}RealmString* object = [self new];
    object.value = (NSString*)json;
    return object;
}

- (BOOL)isEqual:(id)object
{
    if(object == self) {
        return YES;
    }
    if([super isEqualToObject:object]) {
        return YES;
    }
    if(![object isMemberOfClass:self.class]) {
        return NO;
    }
    return [self.value isEqual:[object value]];
}

@end

@implementation {{ class_prefix }}RealmInteger ({{ class_prefix }}JSONable)

- (id<{{ class_prefix }}JSONable>)toJSON
{
    return self.value;
}

+ (instancetype)fromJSON:(id<{{ class_prefix }}JSONable>)json
{
    {{ class_prefix }}RealmInteger* object = [self new];
    object.value = (NSNumber*)json;
    return object;
}

- (BOOL)isEqual:(id)object
{
    if(object == self) {
        return YES;
    }
    if([super isEqualToObject:object]) {
        return YES;
    }
    if(![object isMemberOfClass:self.class]) {
        return NO;
    }
    return [self.value isEqual:[object value]];
}

@end

@implementation {{ class_prefix }}RealmFloat ({{ class_prefix }}JSONable)

- (id<{{ class_prefix }}JSONable>)toJSON
{
    return self.value;
}

+ (instancetype)fromJSON:(id<{{ class_prefix }}JSONable>)json
{
    {{ class_prefix }}RealmFloat* object = [self new];
    object.value = (NSNumber*)json;
    return object;
}

- (BOOL)isEqual:(id)object
{
    if(object == self) {
        return YES;
    }
    if([super isEqualToObject:object]) {
        return YES;
    }
    if(![object isMemberOfClass:self.class]) {
        return NO;
    }
    return [self.value isEqual:[object value]];
}

@end

@implementation {{ class_prefix }}RealmDouble ({{ class_prefix }}JSONable)

- (id<{{ class_prefix }}JSONable>)toJSON
{
    return self.value;
}

+ (instancetype)fromJSON:(id<{{ class_prefix }}JSONable>)json
{
    {{ class_prefix }}RealmDouble* object = [self new];
    object.value = (NSNumber*)json;
    return object;
}

- (BOOL)isEqual:(id)object
{
    if(object == self) {
        return YES;
    }
    if([super isEqualToObject:object]) {
        return YES;
    }
    if(![object isMemberOfClass:self.class]) {
        return NO;
    }
    return [self.value isEqual:[object value]];
}

@end

@implementation {{ class_prefix }}RealmBool ({{ class_prefix }}JSONable)

- (id<{{ class_prefix }}JSONable>)toJSON
{
    return self.value;
}

+ (instancetype)fromJSON:(id<{{ class_prefix }}JSONable>)json
{
    {{ class_prefix }}RealmBool* object = [self new];
    object.value = (NSNumber*)json;
    return object;
}

- (BOOL)isEqual:(id)object
{
    if(object == self) {
        return YES;
    }
    if([super isEqualToObject:object]) {
        return YES;
    }
    if(![object isMemberOfClass:self.class]) {
        return NO;
    }
    return [self.value isEqual:[object value]];
}

@end

@implementation RLMArray ({{ class_prefix }}JSONable)

- (id<{{ class_prefix }}JSONable>)toJSON
{
    NSMutableArray* jsoned = [NSMutableArray array];
    
    for(id<{{ class_prefix }}JSONable> jsonable in self) {
        [jsoned addObject:[jsonable toJSON]];
    }
    
    return [jsoned copy];
}

+ (instancetype)fromJSON:(id<{{ class_prefix }}JSONable>)json
{
    [[NSException exceptionWithName:@"Cannot parse NSArray to RLMArray."
                            reason:@"Cannot create RLMArray directly."
                           userInfo:nil] raise];
    return nil;
}

@end