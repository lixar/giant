{% import 'variables-ios.jinja' as ios with context %}
{% import 'variables.jinja' as vars with context %}
{{ (vars.api_name + '/RealmPrimitives')|start_of_file -}}
{{- ios.file_header('RealmPrimitives.m') }}

#import "NSDate+ISO8601.h"
#import "RealmPrimitives.h"

@implementation RealmString @end

@implementation RealmInteger @end

@implementation RealmFloat @end

@implementation RealmDouble @end

@implementation RealmBool @end

@implementation RealmDate @end

@implementation RealmData @end

@implementation RealmDate (JSONable)

- (id<JSONable>)toJSON
{
    return self.value.iso8601;
}

+ (instancetype)fromJSON:(id<JSONable>)json
{
    RealmDate* object = [RealmDate new];
    object.value = [NSDate dateWithISO8601String:(NSString*)json];
    return object;
}

- (BOOL)isEqual:(id)object
{
    if(object == self) {
        return YES;
    }
    if([super isEqualToObject:object]) {
        return YES;
    }
    if(![object isMemberOfClass:self.class]) {
        return NO;
    }
    return [self.value isEqual:[object value]];
}

@end

@implementation RealmString (JSONable)

- (id<JSONable>)toJSON
{
    return self.value;
}

+ (instancetype)fromJSON:(id<JSONable>)json
{
    RealmString* object = [RealmString new];
    object.value = (NSString*)json;
    return object;
}

- (BOOL)isEqual:(id)object
{
    if(object == self) {
        return YES;
    }
    if([super isEqualToObject:object]) {
        return YES;
    }
    if(![object isMemberOfClass:self.class]) {
        return NO;
    }
    return [self.value isEqual:[object value]];
}

@end

@implementation RealmInteger (JSONable)

- (id<JSONable>)toJSON
{
    return self.value;
}

+ (instancetype)fromJSON:(id<JSONable>)json
{
    RealmInteger* object = [RealmInteger new];
    object.value = (NSNumber*)json;
    return object;
}

- (BOOL)isEqual:(id)object
{
    if(object == self) {
        return YES;
    }
    if([super isEqualToObject:object]) {
        return YES;
    }
    if(![object isMemberOfClass:self.class]) {
        return NO;
    }
    return [self.value isEqual:[object value]];
}

@end

@implementation RealmFloat (JSONable)

- (id<JSONable>)toJSON
{
    return self.value;
}

+ (instancetype)fromJSON:(id<JSONable>)json
{
    RealmFloat* object = [RealmFloat new];
    object.value = (NSNumber*)json;
    return object;
}

- (BOOL)isEqual:(id)object
{
    if(object == self) {
        return YES;
    }
    if([super isEqualToObject:object]) {
        return YES;
    }
    if(![object isMemberOfClass:self.class]) {
        return NO;
    }
    return [self.value isEqual:[object value]];
}

@end

@implementation RealmDouble (JSONable)

- (id<JSONable>)toJSON
{
    return self.value;
}

+ (instancetype)fromJSON:(id<JSONable>)json
{
    RealmDouble* object = [self new];
    object.value = (NSNumber*)json;
    return object;
}

- (BOOL)isEqual:(id)object
{
    if(object == self) {
        return YES;
    }
    if([super isEqualToObject:object]) {
        return YES;
    }
    if(![object isMemberOfClass:self.class]) {
        return NO;
    }
    return [self.value isEqual:[object value]];
}

@end

@implementation RealmBool (JSONable)

- (id<JSONable>)toJSON
{
    return self.value;
}

+ (instancetype)fromJSON:(id<JSONable>)json
{
    RealmBool* object = [self new];
    object.value = (NSNumber*)json;
    return object;
}

- (BOOL)isEqual:(id)object
{
    if(object == self) {
        return YES;
    }
    if([super isEqualToObject:object]) {
        return YES;
    }
    if(![object isMemberOfClass:self.class]) {
        return NO;
    }
    return [self.value isEqual:[object value]];
}

@end

@implementation RLMArray (JSONable)

- (id<JSONable>)toJSON
{
    NSMutableArray* jsoned = [NSMutableArray array];
    
    for(id<JSONable> jsonable in self) {
        [jsoned addObject:[jsonable toJSON]];
    }
    
    return [jsoned copy];
}

+ (instancetype)fromJSON:(id<JSONable>)json
{
    [[NSException exceptionWithName:@"Cannot parse NSArray to RLMArray."
                            reason:@"Cannot create RLMArray directly."
                           userInfo:nil] raise];
    return nil;
}

@end