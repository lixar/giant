{% import 'variables-android.jinja' as android with context %}
{% import 'variables.jinja' as vars with context %}
{{ (android.test_path + '/RestTest')|start_of_file -}}
package com.lixar.athena;

import android.content.Context;
import android.support.v7.appcompat.BuildConfig;
import android.util.Log;

import com.lixar.athena.Athena;
import com.lixar.athena.model.AuthenticationResponse;
import com.google.common.util.concurrent.FutureCallback;
import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ListenableFuture;

import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.MockitoAnnotations;
import org.robolectric.RobolectricGradleTestRunner;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.robolectric.RuntimeEnvironment;
import org.robolectric.annotation.Config;
import org.robolectric.shadows.ShadowLog;

import java.util.concurrent.CountDownLatch;

import retrofit2.Callback;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;

/**
 * Base class for Robolectric rest tests.
 * Inherit from this class to create a test.
 */
@RunWith(RobolectricGradleTestRunner.class)
@Config(
        packageName = "com.lixar.athena",
        constants = BuildConfig.class, sdk=21
)
public abstract class RestTest {
    private final static String TAG = "RestTest";
    protected Context fakeContext;
    private CountDownLatch endSignal;
    Athena athena;

    @Captor
    private ArgumentCaptor<Callback<AuthenticationResponse>> authCallbackArgumentCaptor;

    @Before
    public void setUp() throws Exception{
        MockitoAnnotations.initMocks(this);
        ShadowLog.stream = System.out;
        fakeContext = RuntimeEnvironment.application.getApplicationContext();
        endSignal = new CountDownLatch(1);
        if (BuildConfig.DEBUG) {

        }

        ListenableFuture<Athena> future = new Athena.Builder()
                .withApiKey("test")
                .withClientIdentifier("test")
                .withUrl("http://localhost:10010/")
                .buildAsync();

        Futures.addCallback(future, new FutureCallback<Athena>() {
            @Override
            public void onSuccess(Athena result) {
                athena = result;
                endSignal.countDown();
            }

            @Override
            public void onFailure(Throwable t) {
                Log.e(TAG, "", t);
                athena = null;
                endSignal.countDown();

            }
        });

        endSignal.await();
        assertNotNull(athena);

    }


}