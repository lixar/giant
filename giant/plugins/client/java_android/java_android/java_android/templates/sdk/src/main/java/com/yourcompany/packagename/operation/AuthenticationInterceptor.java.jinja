{% import 'variables-android.jinja' as android with context %}
{% import 'variables.jinja' as vars with context %}
{{ (android.main_path + '/operation/AuthenticationInterceptor')|start_of_file -}}
package {{ android.package_root_name }}.operation;

import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import okhttp3.Interceptor;
import okhttp3.Request;
import okhttp3.Response;

public class AuthenticationInterceptor implements Interceptor {

    private HashMap<String, String> apiTokens = new HashMap<>();

    private static Map<String, String> operationSecurityDefinition;
    static {
        HashMap<String, String> map = new HashMap<>();
        {%- for operation_name, operation in operations.iteritems() %}
        {%- if operation.security is not undefined and operation.security|length > 0 %}
        map.put("{{ operation_name }}", "{{ operation.security[0].keys()[0] }}");
        {%- else %}
        map.put("{{ operation_name }}", null);
        {%- endif %}
        {%- endfor %}
        operationSecurityDefinition = Collections.unmodifiableMap(map);
    }

    @Override
    public Response intercept(Chain chain) throws IOException {
        String authorizationHeaderValue = getApiTokenHeader(chain.request());
        Request.Builder builder = chain.request().newBuilder();
        if(authorizationHeaderValue != null) {
            builder.addHeader("Authorization", authorizationHeaderValue);
        }
        return chain.proceed(builder.build());
    }

    public void setApiToken(String securityDefinitionName, String token) {
        apiTokens.put(securityDefinitionName, token);
    }

    private String getApiTokenHeader(Request request) {
        String operationName = request.header("Operation-Name");
        return apiTokens.get(operationSecurityDefinition.get(operationName));
    }
}